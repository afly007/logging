input {
#   file {
#		type => wireless
#		start_position => beginning 
#		path => [ "/Users/victorcastro/Desktop/logstash/testlogs/allwireless-small.log" ]
#	}
#	   file {
#		type => dhcp
#		start_position => beginning 
#		path => [ "/Users/victorcastro/Desktop/logstash/testlogs/dhcp.queensu.ca-small.log" ]
#	}
	file {
		type => cisco
		start_position => beginning 
#		path => [ "/Users/victorcastro/Desktop/logstash/testlogs/*.log" ]
		path => [ "/Users/victorcastro/Desktop/logstash/testlogs/*fw*.log" ]
		exclude => [ "*WC*.log","*MC*.log","*dhcp*log","*wire*" ]
   }
}


filter {
	
	if [type] == "cisco" {
		
		# Pull the syslog part and Cisco tag out of the message
		grok {
			match => ["message", "%{SYSLOGTIMESTAMP:cisco_timestamp} %{GREEDYDATA:cisco_message}"]
		}

		# Parse the syslog severity and facility
		syslog_pri { }

		grok {
			match => [
				"cisco_message", "%{CISCOFW106001}",
				"cisco_message", "%{CISCOFW106006_106007_106010}",
				"cisco_message", "%{CISCOFW106014}",
				"cisco_message", "%{CISCOFW106015}",
				"cisco_message", "%{CISCOFW106021}",
				"cisco_message", "%{CISCOFW106023}",
				"cisco_message", "%{CISCOFW106100}",
				"cisco_message", "%{CISCOFW110002}",
				"cisco_message", "%{CISCOFW302010}",
				"cisco_message", "%{CISCOFW302013_302014_302015_302016}",
				"cisco_message", "%{CISCOFW302020_302021}",
				"cisco_message", "%{CISCOFW305011}",
				"cisco_message", "%{CISCOFW313001_313004_313008}",
				"cisco_message", "%{CISCOFW313005}",
				"cisco_message", "%{CISCOFW402117}",
				"cisco_message", "%{CISCOFW402119}",
				"cisco_message", "%{CISCOFW419001}",
				"cisco_message", "%{CISCOFW419002}",
				"cisco_message", "%{CISCOFW500004}",
				"cisco_message", "%{CISCOFW602303_602304}",
				"cisco_message", "%{CISCOFW710001_710002_710003_710005_710006}",
				"cisco_message", "%{CISCOFW713172}",
				"cisco_message", "%{CISCOFW733100}"
			]
		}
		
		if [src_ip]  {
			geoip {
				source => "src_ip"
			}
		}
				
		# Parse the date
		date {
			#match => ["timestamp", "MMM dd HH:mm:ss.SSS","MMM d HH:mm:ss.SSS","MMM dd HH:mm:ss","MMM d HH:mm:ss","MMM dd yyyy HH:mm:ss.SSS","MMM d yyyy HH:mm:ss.SSS","MMM dd yyyy HH:mm:ss","MMM d yyyy HH:mm:ss","yyyy-MM-dd HH:mm:ss.SSS","yyyy-MM-dd HH:mm:ss" ]
			match => [ "cisco_timestamp",  "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
			
			timezone => [ "America/Toronto" ]

		}
	}
	
	if [type] == "wireless" {
		# Pull the syslog part and Cisco tag out of the message
		grok {
		match => ["message", "%{ARUBA_TAGGED_SYSLOG} %{GREEDYDATA:aruba_message}"]
		}
		
		
		grok {
			match => [ "aruba_message", "%{ARUBA109005109019}", 
			"aruba_message", "%{ARUBA124038}",
			"aruba_message", "%{ARUBA202085}",
			"aruba_message", "%{ARUBA522008}",
			"aruba_message", "%{ARUBA124003}",
			"aruba_message", "%{ARUBA132197}",
			"aruba_message", "%{ARUBA522010}",
			"aruba_message", "%{ARUBA522042}",
			"aruba_message", "%{ARUBA132207}"
			] 
			
			 remove_field => [ "aruba_message" ]
		}
			
		date {
			# season to taste for your own syslog format(s)
			match => [ "aruba_timestamp",  "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
			timezone => [ "America/Toronto" ]
		}
	}
		
	if [type] == "dhcp" {
		# Pull the syslog part and Cisco tag out of the message
		grok {
			match => ["message", "%{ADONIS_TAGGED_SYSLOG} %{GREEDYDATA:adonis_message}"]
		}
		
		grok {
			match => [ "adonis_message", "%{ADONISDHCPOFFER}", 
			"adonis_message", "%{ADONISDHCPREQUEST}",
			"adonis_message", "%{ADONISDHCPREQUEST2}",
			"adonis_message", "%{ADONISDHCPACK}",
			"adonis_message", "%{ADONISDHCPNACK}",
			"adonis_message", "%{ADONISDHCPDISCOVER}",
			"adonis_message", "%{ADONISDHCPDISCOVER2}",			
			"adonis_message", "%{ADONISDHCPINFORM}"
			] 

			remove_field => [ "adonis_message" ]
		}
		
		date {
			# season to taste for your own syslog format(s)
			match => [ "adonis_timestamp",  "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
			timezone => [ "America/Toronto" ]
		}
	}

}

output {	
	elasticsearch { embedded => true }
}


